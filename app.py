import streamlit as st
import pandas as pd
import plotly.express as px
from PIL import Image
from streamlit_option_menu import option_menu
from streamlit_extras.dataframe_explorer import dataframe_explorer
import numpy as np
import math
import plotly.graph_objects as go
import scipy.stats as stats
from scipy.stats import t


st.set_page_config("DataApp","üìä")

container = st.container()
col1,col2 = st.columns(2)



@st.cache_data
def load_data(file):
    return pd.read_csv(file)



def sort_data(df):
    
    # Sort Data
    sort_column = st.selectbox("Sort by", df.columns)
    df = df.sort_values(by=sort_column)
    return df

    
    
def group_by(df):
     # Group Data
    group_column = st.selectbox("Group by Sum",df.columns)
    grouped_df = df.groupby(group_column).sum()
    return grouped_df

def group_by_mean(df):
     # Group Data
    group_column = st.selectbox("Group by Mean",df.columns)
    grouped_df_mean = df.groupby(group_column).mean()
    return grouped_df_mean


def summary(df):
    summary = df.describe()
    var_row = pd.Series(data=df.var(), name='var')
    var_row.index = summary.columns
    summary = pd.concat([summary.loc[['count', 'mean'], :], var_row.to_frame().T, summary.loc[['std', 'min', '25%', '50%', '75%', 'max'], :]])
    summary.loc['skew'] = df.skew()
    return summary

def summary_p(df):
    n = df.shape[0]
    summary = df.describe()
    var_row = pd.Series(data=df.var(), name='var')*((n-1)/n)
    var_row.index = summary.columns
    summary = pd.concat([summary.loc[['count', 'mean'], :], var_row.to_frame().T, summary.loc[['std', 'min', '25%', '50%', '75%', 'max'], :]])
    summary.loc['std'] = df.std()*math.sqrt((n-1)/n)
    summary.loc['skew'] = df.skew()*((n-2)/math.sqrt(n*(n-1)))
    return summary

   

def info(data):
    container.write(" # Th√¥ng tin d·ªØ li·ªáu # ")
    container.write("#### D·ªØ li·ªáu ####")
    container.write("D·ªØ li·ªáu")
    filtered_df = dataframe_explorer(data, case=False)
    container.dataframe(filtered_df, use_container_width=True)
    container.markdown("---")

    container.write("#### Th√¥ng tin ####")
    r=data.shape[0]
    c=data.shape[1]
    container.markdown(f"K√≠ch th∆∞·ªõc d·ªØ li·ªáu: :red[{r}] x :red[{c}]")
    
    col1,col2,col3 = st.columns(3)

      
    

    with col1:
          
       st.write("T√™n c·ªôt: ")
       st.dataframe(data.columns,use_container_width=True)
    with col2:
          
       st.write("Ki·ªÉu d·ªØ li·ªáu c·ªôt: ")
       st.dataframe(data.dtypes,use_container_width=True)
        
    with col3:
       st.write("Unique Values: ")
       st.dataframe(data.nunique(),use_container_width=True)

    container.markdown("---")
    st.markdown("#### Missing Values ####")
    col1n,col2n = st.columns([1,3])
    with col1n:   
        st.dataframe(data.isnull().sum(),use_container_width=True)
    with col2n:
        st.markdown("   Missing value (gi√° tr·ªã thi·∫øu) trong khoa h·ªçc d·ªØ li·ªáu v√† ph√¢n t√≠ch d·ªØ li·ªáu l√† gi√° tr·ªã kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh trong t·∫≠p d·ªØ li·ªáu.")
        st.markdown("Missing value c√≥ th·ªÉ x·∫£y ra khi d·ªØ li·ªáu b·ªã m·∫•t ho·∫∑c b·ªã l·ªói trong qu√° tr√¨nh thu th·∫≠p ho·∫∑c nh·∫≠p li·ªáu, ho·∫∑c c√≥ th·ªÉ do m·ªôt gi√° tr·ªã kh√¥ng c√≥ √Ω nghƒ©a ƒë∆∞·ª£c ƒë·∫°i di·ªán b·ªüi c√°c gi√° tr·ªã nh∆∞ NaN (Not a Number) ho·∫∑c NULL trong c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh.")
        data.dropna(inplace=True)
        data.reset_index(drop=True, inplace=True)
        st.download_button(
            label="Download clean data",
            data=data.to_csv(index=False),
            file_name='data_clean.csv',
            mime='text/csv',
            )
    image = Image.open("sami.jpg")
    with st.sidebar:
        st.sidebar.image(image,width = 50)
        st.sidebar.markdown("# Data #")
        st.sidebar.markdown("---")
        st.sidebar.markdown("- Data")
        st.sidebar.markdown("- Th√¥ng tin")
        st.sidebar.markdown("- Missing Value")


       
def analyze_data(data):
    # Perform basic data analysis
    container.write(" # Data Analysis # ")
    container.write("#### D·ªØ li·ªáu ####")
    container.write("Data")
    container.dataframe(data,use_container_width=True)
    container.markdown("---")
    ######
    container.write("#### Th·ªëng k√™ m√¥ t·∫£ m·ªôt chi·ªÅu ####")

    container.markdown("###### B·∫£ng gi√° tr·ªã th·ªëng k√™ m√¥ t·∫£ ######")
    use_sample_stats = st.checkbox('Hi·ªáu ch·ªânh m·∫´u th·ªëng k√™', value=True)
    if use_sample_stats:
    # compute and show the sample statistics
        container.dataframe(summary(data),use_container_width=True)
   
    else:
    # compute and show the population statistics
        container.dataframe(summary_p(data),use_container_width=True)
    
    container.markdown("###### Gi√° tr·ªã trung b√¨nh (Mean) ######")
    container.markdown("Gi√° tr·ªã trung b√¨nh, hay c√≤n g·ªçi l√† k·ª≥ v·ªçng, l√† m·ªôt kh√°i ni·ªám th·ªëng k√™ d√πng ƒë·ªÉ ƒëo ƒë·ªô trung t√¢m c·ªßa m·ªôt t·∫≠p d·ªØ li·ªáu. N√≥ ƒë∆∞·ª£c t√≠nh b·∫±ng c√°ch l·∫•y t·ªïng c·ªßa t·∫•t c·∫£ c√°c gi√° tr·ªã trong t·∫≠p d·ªØ li·ªáu v√† chia cho s·ªë l∆∞·ª£ng c√°c gi√° tr·ªã ƒë√≥.")
    container.latex(r'''
    \operatorname{E}(X) = \frac{x_1 + x_2 + \dots + x_n}{n}
    ''')

    input1 = st.text_input("V√≠ d·ª• gi√° tr·ªã trung b√¨nh:",placeholder="Vd:1,2,4,2,5")

# Convert input to list of values
    values = input1.split(',')

# Convert non-empty values to numeric
    numeric_values = []
    for value in values:
        value = value.strip()
        if value:
            numeric_values.append(float(value))

# Create a Pandas Series
    series1 = pd.Series(numeric_values)

# Calculate the mean
    series1_mean = series1.mean()

# Display the mean with green text color
    if input1:
        container.markdown(f"Gi√° tr·ªã trung b√¨nh c·ªßa d√£y: <span style='color:green;'>{series1_mean}</span>", unsafe_allow_html=True)
    container.markdown("---")

    container.markdown("###### Ph∆∞∆°ng sai (Variance) ######")
    container.markdown("Ph∆∞∆°ng sai (variance) l√† m·ªôt th∆∞·ªõc ƒëo v·ªÅ m·ª©c ƒë·ªô ph√¢n t√°n c·ªßa c√°c gi√° tr·ªã trong m·ªôt t·∫≠p d·ªØ li·ªáu. N√≥ ƒëo l∆∞·ªùng ƒë·ªô l·ªách c·ªßa m·ªói gi√° tr·ªã so v·ªõi gi√° tr·ªã trung b√¨nh c·ªßa t·∫≠p d·ªØ li·ªáu ƒë√≥. Ph∆∞∆°ng sai ƒë∆∞·ª£c t√≠nh b·∫±ng c√°ch l·∫•y t·ªïng b√¨nh ph∆∞∆°ng c·ªßa hi·ªáu gi·ªØa m·ªói gi√° tr·ªã v√† gi√° tr·ªã trung b√¨nh, chia cho s·ªë l∆∞·ª£ng c√°c gi√° tr·ªã trong t·∫≠p d·ªØ li·ªáu.")
    container.latex(r'''
    \operatorname{Var}(X) = \sigma^2 = \frac{1}{N} \sum_{i=1}^N (x_i - \mu)^2
    ''')
    container.markdown("Ph∆∞∆°ng sai m·∫´u hi·ªáu ch·ªânh ƒë∆∞·ª£c t√≠nh b·∫±ng c√°ch l·∫•y t·ªïng b√¨nh ph∆∞∆°ng c·ªßa hi·ªáu gi·ªØa m·ªói gi√° tr·ªã v√† gi√° tr·ªã trung b√¨nh, chia cho s·ªë l∆∞·ª£ng c√°c gi√° tr·ªã trong m·∫´u tr·ª´ 1.")
    container.latex(r'''
    \operatorname{s}^2 = \frac{1}{n-1} \sum_{i=1}^n (x_i - \bar{x})^2
    ''')
    input2 = st.text_input("V√≠ d·ª• ph∆∞∆°ng sai:",placeholder="Vd:1,2,4,2,5")
    values2 = input2.split(',')
    numeric_values1 = []
    for value in values2:
        value = value.strip()
        if value:
            numeric_values1.append(float(value))
    series2 = pd.Series(numeric_values1)
    series2_var = series2.var()
    if input1:
        container.markdown(f"Gi√° tr·ªã ph∆∞∆°ng sai hi·ªáu ch·ªânh c·ªßa d√£y: <span style='color:green;'>{series2_var}</span>", unsafe_allow_html=True)
    container.markdown("---")

    container.markdown("###### C√°c t·ª© ph√¢n v·ªã (Quartiles) ######")
    container.markdown("C√°c t·ª© ph√¢n v·ªã (quartiles) l√† m·ªôt ph∆∞∆°ng ph√°p th·ªëng k√™ m√¥ t·∫£ ƒë·ªÉ ph√¢n chia m·ªôt t·∫≠p d·ªØ li·ªáu th√†nh b·ªën ph·∫ßn b·∫±ng nhau. C√°c t·ª© ph√¢n v·ªã chia t·∫≠p d·ªØ li·ªáu th√†nh ba kho·∫£ng gi√° tr·ªã, ƒë∆∞·ª£c ƒë√°nh s·ªë t·ª´ Q1 ƒë·∫øn Q3, sao cho kho·∫£ng gi√° tr·ªã gi·ªØa Q1 v√† Q3 ch·ª©a 50% d·ªØ li·ªáu v√† kho·∫£ng gi√° tr·ªã gi·ªØa Q2 (t·ª©c l√† gi√° tr·ªã trung v·ªã) c≈©ng ch·ª©a 50% d·ªØ li·ªáu.")
    container.markdown("T·ª© ph√¢n v·ªã th·ª© nh·∫•t (Q1) t∆∞∆°ng ·ª©ng v·ªõi ph√¢n v·ªã 25%. N√≥ l√† gi√° tr·ªã m√† c√≥ 25% d·ªØ li·ªáu nh·ªè h∆°n ho·∫∑c b·∫±ng n√≥ v√† 75% d·ªØ li·ªáu l·ªõn h∆°n ho·∫∑c b·∫±ng n√≥.")
    container.latex(r'''
     \operatorname{Q1} =\begin{cases} x_{(\frac{n+1}{4})}, & \text{n l√† s·ªë ch·∫µn} \\ \frac{1}{2}(x_{(\frac{n+1}{4})} + x_{(\frac{n+3}{4})}), & \text{n l√† s·ªë l·∫ª} \end{cases}
    ''')
    container.markdown("T·ª© ph√¢n v·ªã th·ª© hai (Q2) t∆∞∆°ng ·ª©ng v·ªõi ph√¢n v·ªã 50% ho·∫∑c gi√° tr·ªã trung v·ªã. N√≥ l√† gi√° tr·ªã m√† c√≥ 50% d·ªØ li·ªáu nh·ªè h∆°n ho·∫∑c b·∫±ng n√≥ v√† 50% d·ªØ li·ªáu l·ªõn h∆°n ho·∫∑c b·∫±ng n√≥.")
    container.latex(r'''
     \operatorname{Q2} = \begin{cases} x_{(\frac{n+1}{2})}, & \text{n l√† s·ªë l·∫ª} \\ \frac{x_{(\frac{n}{2})} + x_{(\frac{n}{2}+1)}}{2}, & \text{n l√† s·ªë ch·∫µn} \end{cases}
    ''')
    container.markdown("T·ª© ph√¢n v·ªã th·ª© ba (Q3) t∆∞∆°ng ·ª©ng v·ªõi ph√¢n v·ªã 75%. N√≥ l√† gi√° tr·ªã m√† c√≥ 75% d·ªØ li·ªáu nh·ªè h∆°n ho·∫∑c b·∫±ng n√≥ v√† 25% d·ªØ li·ªáu l·ªõn h∆°n ho·∫∑c b·∫±ng n√≥.")
    container.latex(r'''
     \operatorname{Q3} = \begin{cases} x_{(\frac{3n+1}{4})}, & \text{n l√† s·ªë ch·∫µn} \\ \frac{1}{2}(x_{(\frac{3n+1}{4})} + x_{(\frac{3n+3}{4})}), & \text{n l√† s·ªë l·∫ª} \end{cases}
    ''')
    container.latex(r'''
    \textcolor{red}{\textbf{Ch√∫ √Ω: }} x_{(i)} \text{ l√† ph·∫ßn t·ª≠ th·ª© $i$}  \text{ c·ªßa t·∫≠p d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª± tƒÉng d·∫ßn.}
    ''')
    #Eg 
    input3 = st.text_input("V√≠ d·ª• c√°c t·ª© ph√¢n v·ªã:",placeholder="Vd:1,2,4,2,5")
    values3 = input3.split(',')
    numeric_values3 = []
    for value3 in values3:
        value3 = value3.strip()
        if value3:
            numeric_values3.append(float(value3))
    series3 = pd.Series(numeric_values3)
    q1 = series3.quantile(0.25)
    q2 = series3.quantile(0.5)  # Median
    q3 = series3.quantile(0.75)
    if input3:
        container.markdown(f"Gi√° tr·ªã Q1: <span style='color:green;'>{q1}</span>", unsafe_allow_html=True)
        container.markdown(f"Gi√° tr·ªã Q2 (Trung v·ªã): <span style='color:green;'>{q2}</span>", unsafe_allow_html=True)
        container.markdown(f"Gi√° tr·ªã Q3: <span style='color:green;'>{q3}</span>", unsafe_allow_html=True)
    container.markdown("---")

    
    container.markdown("###### ƒê·ªô l·ªách (Skewness) ######")
    container.markdown("Skewness (ƒë·ªô l·ªách) l√† m·ªôt ƒë·ªô ƒëo th·ªëng k√™ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒëo m·ª©c ƒë·ªô b·∫•t ƒë·ªëi x·ª©ng c·ªßa ph√¢n ph·ªëi d·ªØ li·ªáu. N√≥ ƒëo s·ª± ch·ªách l·ªách c·ªßa ph√¢n ph·ªëi d·ªØ li·ªáu so v·ªõi ph√¢n ph·ªëi chu·∫©n ho·∫∑c ph√¢n ph·ªëi ƒë·ªëi x·ª©ng")
    container.markdown("N·∫øu ph√¢n ph·ªëi d·ªØ li·ªáu l·ªách sang ph·∫£i (c√≥ ƒëu√¥i ph√¢n ph·ªëi d√†i h∆°n b√™n ph·∫£i so v·ªõi b√™n tr√°i), th√¨ gi√° tr·ªã skewness s·∫Ω l√† s·ªë d∆∞∆°ng. Ng∆∞·ª£c l·∫°i, n·∫øu ph√¢n ph·ªëi d·ªØ li·ªáu l·ªách sang tr√°i (c√≥ ƒëu√¥i ph√¢n ph·ªëi d√†i h∆°n b√™n tr√°i so v·ªõi b√™n ph·∫£i), th√¨ gi√° tr·ªã skewness s·∫Ω l√† s·ªë √¢m. N·∫øu ph√¢n ph·ªëi d·ªØ li·ªáu ƒë·ªëi x·ª©ng, th√¨ skewness s·∫Ω b·∫±ng 0.")
    container.latex(r'''
    \operatorname{S} = \sqrt{n}*\frac{\sum_{i=1}^N (x_i - \mu)^3}{\left(\sum_{i=1}^N (x_i - \mu)^2\right)^{3/2}}
    ''')
    container.markdown("Trong tr∆∞·ªùng h·ª£p mu·ªën t√≠nh ƒë·ªô l·ªách skewness m·∫´u hi·ªáu ch·ªânh ")
    container.latex(r'''
    \operatorname{S} = \frac{n\sqrt{n-1}}{n-2}*\frac{\sum_{i=1}^N (x_i - \mu)^3}{\left(\sum_{i=1}^N (x_i - \mu)^2\right)^{3/2}}
    ''')
    container.markdown("---")
    
    container.write("#### ƒê·∫∑c tr∆∞ng th·ªëng k√™ m·∫´u nhi·ªÅu chi·ªÅu ####")
    container.markdown(
                """
                <style>
                .a {
                    margin-top: 30px ;
                    }
                </style>

                <div class="a"></div>
                """,
                unsafe_allow_html=True
            )
    col1,col2 = st.columns(2)
    with col1:
        col1.markdown("###### Ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai ######")
        col1.dataframe(data.cov(),use_container_width=True)
    with col2:
        col2.markdown("######  Ma tr·∫≠n h·ªá s·ªë t∆∞∆°ng quan ######")
        col2.dataframe(data.corr(),use_container_width=True)
    container.markdown("#### Hi·ªáp ph∆∞∆°ng sai v√† h·ªá s·ªë t∆∞∆°ng quan ####")
    container.markdown("Ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai l√† m·ªôt ma tr·∫≠n ƒë·∫°i di·ªán cho ph∆∞∆°ng sai c·ªßa c√°c bi·∫øn ng·∫´u nhi√™n trong m·ªôt t·∫≠p d·ªØ li·ªáu ƒëa chi·ªÅu.")
    container.markdown("Ma tr·∫≠n h·ªá s·ªë t∆∞∆°ng quan l√† m·ªôt phi√™n b·∫£n chu·∫©n h√≥a c·ªßa ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai. N√≥ c≈©ng ƒë·∫°i di·ªán cho m·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn trong t·∫≠p d·ªØ li·ªáu ƒëa chi·ªÅu, nh∆∞ng thay v√¨ hi·ªÉn th·ªã ph∆∞∆°ng sai, n√≥ hi·ªÉn th·ªã t∆∞∆°ng quan gi·ªØa c√°c bi·∫øn. Ma tr·∫≠n n√†y ƒë∆∞·ª£c t√≠nh b·∫±ng c√°ch chia m·ªói ph·∫ßn t·ª≠ trong ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai cho t√≠ch c·ªßa cƒÉn b·∫≠c hai c·ªßa ph∆∞∆°ng sai c·ªßa hai bi·∫øn t∆∞∆°ng ·ª©ng.")
    container.markdown("C√¥ng th·ª©c ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai v·ªõi ph∆∞∆°ng sai m·∫´u hi·ªáu ch·ªânh: ")
    container.latex(r'''
    \mathbf{S} = \frac{1}{n-1}(\mathbf{X}-\boldsymbol{\bar{X}})^T(\mathbf{X}-\boldsymbol{\bar{X}}) = 
        \begin{bmatrix}
            s_{11} & s_{12} & \cdots & s_{1n} \\
            s_{21} & s_{22} & \cdots & s_{2n} \\
            \vdots & \vdots & \ddots & \vdots \\
            s_{n1} & s_{n2} & \cdots & s_{nn}
        \end{bmatrix}

    ''')
    container.latex(r'''
    \text{Trong ƒë√≥ } s_{ij} = \frac{1}{n-1} \sum_{k=1}^{n} (x_{ki} - \bar{x_i})(x_{kj} - \bar{x_j})
    ''')
    container.markdown("C√¥ng th·ª©c h·ªá s·ªë t∆∞∆°ng quan: ")
    container.latex(r'''
    r_{XY} = \frac{\operatorname{cov}(X,Y)}{\sigma_X \sigma_Y}
    ''')
    container.markdown("---")
    
    image = Image.open("sami.jpg")
    with st.sidebar:
        st.sidebar.image(image,width = 50)
        st.sidebar.markdown("# Th·ªëng k√™ #")
        st.sidebar.markdown("---")
        mark_down_text = """
        - D·ªØ li·ªáu
        - Th·ªëng k√™ m√¥ t·∫£ m·ªôt chi·ªÅu
            - B·∫£ng th·ªëng k√™
            - Gi√° tr·ªã trung b√¨nh
            - Ph∆∞∆°ng sai
            - C√°c t·ª© ph√¢n v·ªã
            - ƒê·ªô l·ªách Skewness
        - Th·ªëng k√™ m√¥ t·∫£ nhi·ªÅu chi·ªÅu
            - Hi·ªáp ph∆∞∆°ng sai
            - H·ªá s·ªë t∆∞∆°ng quan
        """
        st.sidebar.markdown(mark_down_text)

# Data viusualyzation
def create_chart(chart_type, data):
    if chart_type == "Bar":
    
        st.header("Bar Chart")
        x_column = st.selectbox("Ch·ªçn tr·ª•c X", data.columns)

        y_column = st.selectbox("Ch·ªçn tr·ª•c Y", data.columns)
        fig = px.bar(data, x=x_column, y=y_column,color = x_column)
        st.plotly_chart(fig,theme=None, use_container_width=True)

    elif chart_type == "Line":
        multiple = st.checkbox("V·∫Ω nhi·ªÅu ƒë∆∞·ªùng", value=False)
        x_column = st.selectbox("Ch·ªçn tr·ª•c X", data.columns)

        if multiple:
            container = st.empty()
            number = container.number_input("Nh·∫≠p s·ªë l∆∞·ª£ng ƒë∆∞·ªùng", min_value=1, step=1, value=1)

            y_columns = []
            for i in range(number):
                y_column = st.selectbox(f"Ch·ªçn tr·ª•c Y {i+1}", data.columns)
                y_columns.append(y_column)

    # Create line chart with multiple lines
            fig = px.line(data, x=x_column, y=y_columns, markers=True)

        else:
            y_column = st.selectbox("Ch·ªçn tr·ª•c Y", data.columns)

        # Create line chart with single line
            fig = px.line(data, x=x_column, y=y_column, markers=True)

        st.plotly_chart(fig,theme=None, use_container_width=True)

    elif chart_type == "Scatter":

        st.header("Scatter Chart")
        x_column = st.selectbox("Ch·ªçn tr·ª•c X", data.columns)

        y_column = st.selectbox("Ch·ªçn tr·ª•c Y", data.columns)
        fig = px.scatter(data, x=x_column, y=y_column,color=x_column)
        st.plotly_chart(fig,theme=None, use_container_width=True)

    elif chart_type == "Pie":

        st.header("Bi·ªÉu ƒë·ªì tr√≤n")
        x_column = st.selectbox("Ch·ªçn nh√£n", data.columns)
        y_column = st.selectbox("Ch·ªçn gi√° tr·ªã", data.columns)
        donut = st.checkbox('S·ª≠ d·ª•ng donut', value=True)
        if donut:
        # compute and show the sample statistics
            hole = 0.4
   
        else:
         # compute and show the population statistics
            hole = 0
        fig = px.pie(data,names = x_column,values = y_column,hole=hole)
        st.plotly_chart(fig,theme=None, use_container_width=True)
    
    elif chart_type == "Boxplot":
        st.header("Bi·ªÉu ƒë·ªì H·ªôp")
        x_column = st.selectbox("Ch·ªçn tr·ª•c X", data.columns)
        y_column = st.selectbox("Ch·ªçn tr·ª•c Y", data.columns)

        fig = px.box(data,x = x_column,y = y_column, )
        st.plotly_chart(fig,theme=None, use_container_width=True)
    image = Image.open("sami.jpg")
    with st.sidebar:
        st.sidebar.image(image,width = 50)
        st.sidebar.markdown("# Tr·ª±c quan h√≥a #")
        st.sidebar.markdown("---")
        mark_down_text = """
        """
        st.sidebar.markdown(mark_down_text)

#hypothesis test
def hypothesis_test(data):
    # Perform basic data analysis
    container.write(" # Ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt th·ªëng k√™ # ")
    container.write("#### D·ªØ li·ªáu ####")
    container.write("Data")
    container.dataframe(data,use_container_width=True)
    container.markdown("---")
    ######
    container.write("#### Ki·ªÉm ƒë·ªãnh v·ªÅ gi√° tr·ªã trung b√¨nh ####")
    numeric_columns = data.select_dtypes(include=["int", "float"]).columns
    x_column = st.selectbox("Ch·ªçn c·ªôt c·∫ßn ki·ªÉm ƒë·ªãnh ", numeric_columns)
    container.markdown("C√°c y·∫øu t·ªë: ")
    col1, col2, col3 = st.columns(3)
    with col1:
        clevel = st.text_input('M·ª©c √Ω nghƒ©a', '0.05')
    with col2:
        a0 = st.text_input('Gi√° tr·ªã c·∫ßn ki·ªÉm ƒë·ªãnh', '')

    with col3:
        H1 = st.selectbox("ƒê·ªëi thuy·∫øt", ["Kh√°c", "L·ªõn h∆°n", "Nh·ªè h∆°n"])
    
    sample = data[x_column].values
    alpha = float(clevel)
    container.markdown("---")
      
    

# Determine the alternative hypothesis based on the selected option
    

# Compare the p-value with the significance level and a0
    if a0.strip():  # Check if a0 is not empty or whitespace
        container.markdown("###### B√†i to√°n ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt:")
        col1, col2, col3 = st.columns(3)
        with col2:
            if H1 == "Kh√°c":
                st.latex(r'''
                \left\{
                \begin{aligned}
                    H_0 &= \mu \\
                    H_1 &\neq \mu
                \end{aligned}
                \right.
                ''')
            elif H1 == "L·ªõn h∆°n":
                st.latex(r'''
                \left\{
                \begin{aligned}
                    H_0 &= \mu \\
                    H_1 &> \mu
                \end{aligned}
                \right.
                ''')
            else:
                st.latex(r'''
                \left\{
                \begin{aligned}
                    H_0 &= \mu \\
                    H_1 &< \mu
                \end{aligned}
                \right.
                ''')
        stats_df = pd.DataFrame({
        "Mean": [data[x_column].mean()],
        "Standard Deviation": [data[x_column].std()],
        "Count": [data[x_column].count()]
    })
        
        container.markdown("Gi√° tr·ªã th·ªëng k√™ t√≠nh ƒë∆∞·ª£c")
        reset_df=stats_df.set_index("Mean",drop=True)
        container.dataframe(reset_df,use_container_width=True)
        a0_value = float(a0)
        container.markdown("Th·ªëng k√™ ph√π h·ª£p t:")
        container.latex(r'''
        t=\dfrac{(\overline{x}-\mu)\sqrt{n}}{s_d}
        ''')

        if H1 == "Kh√°c":
            t_statistic, p_value= stats.ttest_1samp(sample, popmean=a0_value)
            st.markdown(f"t-statistic= :green[{t_statistic}]")
            percent=stats.t.ppf(q=1-alpha/2, df=data[x_column].count()-1)
            t_critical_1 = t.ppf(alpha / 2, data[x_column].count()-1)
            t_critical_2 = t.ppf(1 - alpha / 2, data[x_column].count()-1)

            # Generate x values for the PDF plot
            x = np.linspace(-5, 5, 1000)

            # Calculate the PDF values
            pdf = t.pdf(x, data[x_column].count()-1)

            # Plot the PDF
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=x, y=pdf, name="PDF"))
            fig.update_layout(
                title=f"Student's t-Distribution PDF (df={data[x_column].count()-1})",
                xaxis_title="x",
                yaxis_title="PDF",
            )

            x_fill1 = np.linspace(-5, t_critical_1, 1000)
            pdf_fill1 = t.pdf(x_fill1, data[x_column].count()-1)

            x_fill2 = np.linspace(t_critical_2, 5, 1000)
            pdf_fill2 = t.pdf(x_fill2, data[x_column].count()-1)

            # Highlight the area under the curve    
            fig.add_trace(go.Scatter(x=x_fill1, y=pdf_fill1, fill='tozeroy', fillcolor='rgba(100, 10, 10, 0.3)',
                         mode='lines', line=dict(color='rgba(0, 0, 0, 0)'), name='Area Under Curve'))
            fig.add_trace(go.Scatter(x=x_fill2, y=pdf_fill2, fill='tozeroy', fillcolor='rgba(100, 10, 10, 0.3)',
                         mode='lines', line=dict(color='rgba(0, 0, 0, 0)'), name='Area Under Curve'))

            # Highlight the two tail areas
            fig.add_trace(go.Scatter(x=[t_critical_1, t_critical_1], y=[0, t.pdf(t_critical_1, data[x_column].count()-1)],
                         mode="lines", name="Left Tail Area", line=dict(color="red", dash="dash")))
            fig.add_trace(go.Scatter(x=[t_critical_2, t_critical_2], y=[0, t.pdf(t_critical_2, data[x_column].count()-1)],
                         mode="lines", name="Right Tail Area", line=dict(color="red", dash="dash")))

            # Display the plot
            st.plotly_chart(fig,theme=None, use_container_width=True)
            
            sigma = (data[x_column].std())/math.sqrt(data[x_column].count())  # Sample stdev/sample size

            interval=stats.t.interval(1-alpha,                        # Confidence level
                 df = data[x_column].count()-1,                     # Degrees of freedom
                 loc = data[x_column].mean(), # Sample mean
                 scale= sigma)
            st.markdown(f"Kho·∫£ng tin c·∫≠y 2 ph√≠a: :green[{interval}]" )
            st.markdown("##### K·∫øt lu·∫≠n")
            if(np.abs(t_statistic) > percent):
                latex_expression = r"t_{n-1}(\frac{\alpha}{2})"
                st.markdown(f"V√¨ |t_statistic| = :green[{np.abs(t_statistic)}] > $$ {latex_expression}$$ = :green[{percent}] ")
                st.markdown(f"n√™n ta b√°c b·ªè gi·∫£ thuy·∫øt H0 ·ªü m·ª©c √Ω nghƒ©a :green[{alpha}]")
            else:
                latex_expression = r"t_{n-1}(\frac{\alpha}{2})"
                st.markdown(f"V√¨ |t_statistic|= :green[{np.abs(t_statistic)}] < $$ {latex_expression}$$=:green[{percent}] ")
                st.markdown(f"n√™n ta ch·∫•p nh·∫≠n gi·∫£ thuy·∫øt H0 ·ªü m·ª©c √Ω nghƒ©a :green[{alpha}]")

        elif H1 == "L·ªõn h∆°n":
            percent=stats.t.ppf(q=1-alpha, df=data[x_column].count()-1)
            t_statistic = (data[x_column].mean() - a0_value) / (data[x_column].std() / math.sqrt(data[x_column].count()))
            st.markdown(f"t-statistic= :green[{t_statistic}]")
            t_critical = stats.t.ppf(1 - alpha, df=data[x_column].count()-1)

            # Generate x values for the PDF plot
            x = np.linspace(-5, 5, 1000)

            # Calculate the PDF values
            pdf = stats.t.pdf(x, df=data[x_column].count()-1)

            # Plot the PDF
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=x, y=pdf, name="PDF"))
            fig.update_layout(
            title=f"Student's t-Distribution PDF (df={data[x_column].count()-1})",
            xaxis_title="x",
            yaxis_title="PDF",
            )

            x_fill = np.linspace(t_critical, x[-1], 1000)
            pdf_fill = stats.t.pdf(x_fill, df=data[x_column].count()-1)

            # Highlight the area under the curve
            fig.add_trace(go.Scatter(x=x_fill, y=pdf_fill, fill='tozeroy', fillcolor='rgba(100, 10, 10, 0.3)',
                         mode='lines', line=dict(color='rgba(0, 0, 0, 0)'), name='Area Under Curve'))

            # Highlight the critical region
            fig.add_trace(go.Scatter(x=[t_critical, t_critical], y=[0, stats.t.pdf(t_critical, df=data[x_column].count()-1)],
                         mode="lines", name="Critical Region", line=dict(color="red", dash="dash")))

# Display the plot
            st.plotly_chart(fig, theme=None, use_container_width=True)
            st.markdown("##### K·∫øt lu·∫≠n")
            if(t_statistic > percent):
                latex_expression = r"t_{n-1}({1- \alpha})"
                st.markdown(f"V√¨ t_statistic= :green[{t_statistic}] > $$ {latex_expression}$$ = :green[{percent}] ")
                st.markdown(f"n√™n ta b√°c b·ªè gi·∫£ thuy·∫øt H0 ·ªü m·ª©c √Ω nghƒ©a :green[{alpha}]")
            else:
                latex_expression = r"t_{n-1}({1- \alpha})"
                st.markdown(f"V√¨ t_statistic= :green[{t_statistic}] < $$ {latex_expression}$$=:green[{percent}] ")
                st.markdown(f"n√™n ta ch·∫•p nh·∫≠n gi·∫£ thuy·∫øt H0 ·ªü m·ª©c √Ω nghƒ©a :green[{alpha}]")  
        else:
            percent=stats.t.ppf(q=alpha, df=data[x_column].count()-1)
            t_statistic = (data[x_column].mean() - a0_value) / (data[x_column].std() / math.sqrt(data[x_column].count()))
            st.markdown(f"t-statistic= :green[{t_statistic}]")
            t_critical = stats.t.ppf(alpha, df=data[x_column].count()-1)
            # Generate x values for the PDF plot
            x = np.linspace(-5, 5, 1000)

            # Calculate the PDF values
            pdf = stats.t.pdf(x, df=data[x_column].count()-1)

            # Plot the PDF
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=x, y=pdf, name="PDF"))
            fig.update_layout(
            title=f"Student's t-Distribution PDF (df={data[x_column].count()-1})",
            xaxis_title="x",
            yaxis_title="PDF",
            )

            x_fill = np.linspace(-5,t_critical, 1000)
            pdf_fill = stats.t.pdf(x_fill, df=data[x_column].count()-1)

            # Highlight the area under the curve
            fig.add_trace(go.Scatter(x=x_fill, y=pdf_fill, fill='tozeroy', fillcolor='rgba(100, 10, 10, 0.3)',
                         mode='lines', line=dict(color='rgba(0, 0, 0, 0)'), name='Area Under Curve'))

            # Highlight the critical region
            fig.add_trace(go.Scatter(x=[t_critical, t_critical], y=[0, stats.t.pdf(t_critical, df=data[x_column].count()-1)],
                         mode="lines", name="Critical Region", line=dict(color="red", dash="dash")))

            st.plotly_chart(fig, theme=None, use_container_width=True)
            st.markdown("##### K·∫øt lu·∫≠n")
            if(t_statistic < percent):
                latex_expression = r"t_{n-1}({\alpha})"
                st.markdown(f"V√¨ t_statistic= :green[{t_statistic}] < $$ {latex_expression}$$ = :green[{percent}] ")
                st.markdown(f"n√™n ta b√°c b·ªè gi·∫£ thuy·∫øt H0 ·ªü m·ª©c √Ω nghƒ©a :green[{alpha}]")
            else:
                latex_expression = r"t_{n-1}({\alpha})"
                st.markdown(f"V√¨ t_statistic= :green[{t_statistic}] > $$ {latex_expression}$$=:green[{percent}] ")
                st.markdown(f"n√™n ta ch·∫•p nh·∫≠n gi·∫£ thuy·∫øt H0 ·ªü m·ª©c √Ω nghƒ©a :green[{alpha}]")  

        # Interpret the results based on the p-value and the selected options
        
    image = Image.open("sami.jpg")
    with st.sidebar:
        st.sidebar.image(image,width = 50)
        st.sidebar.markdown("# Th·ªëng k√™ #")
        st.sidebar.markdown("---")
        mark_down_text = """
        - D·ªØ li·ªáu
        - Th·ªëng k√™ m√¥ t·∫£ m·ªôt chi·ªÅu
            - B·∫£ng th·ªëng k√™
            - Gi√° tr·ªã trung b√¨nh
            - Ph∆∞∆°ng sai
            - C√°c t·ª© ph√¢n v·ªã
            - ƒê·ªô l·ªách Skewness
        - Th·ªëng k√™ m√¥ t·∫£ nhi·ªÅu chi·ªÅu
            - Hi·ªáp ph∆∞∆°ng sai
            - H·ªá s·ªë t∆∞∆°ng quan
        """
        st.sidebar.markdown(mark_down_text)

    
    
# main function
def main():

    
    image = Image.open("sami.jpg")
    
    container.image(image,width = 100)
    container.write(" # Th·ªëng k√™ v√† ph√¢n t√≠ch d·ªØ li·ªáu # ")

    with container:

        selected = option_menu(None, ["D·ªØ li·ªáu", "Th·ªëng k√™", "Tr·ª±c quan h√≥a","Ki·ªÉm ƒë·ªãnh"], 
            icons=['clipboard-data', 'table', "bar-chart-fill", 'clipboard-check'], 
            menu_icon="cast", default_index=0, orientation="horizontal")
        
        container.markdown(
                """
                <style>
                .a {
                    margin-top: 50px ;
                    }
                </style>

                <div class="a"></div>
                """,
                unsafe_allow_html=True
            )

    
        container.markdown("### T·∫£i l√™n d·ªØ li·ªáu ###")
        file = st.file_uploader("",type=["csv"])


        if file is not None:

            data = load_data(file)

            if selected =='D·ªØ li·ªáu':
                info(data)

            if selected == 'Th·ªëng k√™':
                analyze_data(data)

            if selected =='Tr·ª±c quan h√≥a':

                container.write(" # Tr·ª±c quan h√≥a d·ªØ li·ªáu # ")
                container.write("Data")
                container.dataframe(data,use_container_width=True)
                container.markdown("---")

                chart_type = st.selectbox("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì", ["Bar", "Line", "Scatter","Pie","Boxplot"])

                create_chart(chart_type, data)

            if selected =='Ki·ªÉm ƒë·ªãnh':
                hypothesis_test(data)
        else:
            st.sidebar.image(image,width = 50)
            st.sidebar.markdown("# Data #")
            st.sidebar.markdown("---")
            




          

        
if __name__ == "__main__":
    main()
    

    

    

